import java.util.Random;
import java.util.concurrent.*;

public class AeropuertoControl {

    private static final ExecutorService executor = Executors.newFixedThreadPool(4);
    private static final Random random = new Random();

    public static CompletableFuture<Boolean> verificarPista() {
        return CompletableFuture.supplyAsync(() -> {
            esperar(2000, 3000);
            boolean resultado = random.nextDouble() < 0.80;
            System.out.println("üõ£Ô∏è Pista disponible: " + resultado);
            return resultado;
        }, executor);
    }

    public static CompletableFuture<Boolean> verificarClima() {
        return CompletableFuture.supplyAsync(() -> {
            esperar(2000, 3000);
            boolean resultado = random.nextDouble() < 0.85;
            System.out.println("üå¶Ô∏è Clima favorable: " + resultado);
            return resultado;
        }, executor);
    }

    public static CompletableFuture<Boolean> verificarTraficoAereo() {
        return CompletableFuture.supplyAsync(() -> {
            esperar(2000, 3000);
            boolean resultado = random.nextDouble() < 0.90;
            System.out.println("üö¶ Tr√°fico a√©reo despejado: " + resultado);
            return resultado;
        }, executor);
    }

    public static CompletableFuture<Boolean> verificarPersonalTierra() {
        return CompletableFuture.supplyAsync(() -> {
            esperar(2000, 3000);
            boolean resultado = random.nextDouble() < 0.95;
            System.out.println("üë∑‚Äç‚ôÇÔ∏è Personal disponible: " + resultado);
            return resultado;
        }, executor);
    }

    public static void main(String[] args) {
        System.out.println("üõ´ Verificando condiciones para aterrizaje...\n");

        CompletableFuture<Boolean> pista = verificarPista()
            .exceptionally(ex -> {
                System.out.println("‚ùå Error en verificaci√≥n de pista");
                return false;
            });

        CompletableFuture<Boolean> clima = verificarClima()
            .exceptionally(ex -> {
                System.out.println("‚ùå Error en verificaci√≥n de clima");
                return false;
            });

        CompletableFuture<Boolean> trafico = verificarTraficoAereo()
            .exceptionally(ex -> {
                System.out.println("‚ùå Error en verificaci√≥n de tr√°fico a√©reo");
                return false;
            });

        CompletableFuture<Boolean> personal = verificarPersonalTierra()
            .exceptionally(ex -> {
                System.out.println("‚ùå Error en verificaci√≥n de personal en tierra");
                return false;
            });

        CompletableFuture<Void> todas = CompletableFuture.allOf(pista, clima, trafico, personal);

        todas.thenRun(() -> {
            try {
                boolean condicionesOk =
                    pista.get() && clima.get() && trafico.get() && personal.get();

                if (condicionesOk) {
                    System.out.println("\nüõ¨ Aterrizaje autorizado: todas las condiciones √≥ptimas.");
                } else {
                    System.out.println("\nüö´ Aterrizaje denegado: condiciones no √≥ptimas.");
                }
            } catch (Exception e) {
                System.out.println("\nüö´ Aterrizaje denegado: error en la verificaci√≥n.");
            } finally {
                executor.shutdown();
            }
        }).join(); // Espera a que finalicen todas las tareas
    }

    private static void esperar(int min, int max) {
        try {
            Thread.sleep(min + random.nextInt(max - min));
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
