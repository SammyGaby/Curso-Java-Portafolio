import reactor.core.publisher.Flux;
import reactor.core.publisher.SignalType;
import reactor.util.function.Tuple5;

import java.time.Duration;
import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

public class MeridianPrimeControl {

    private static final Random random = new Random();
    private static final AtomicInteger semaforoRojoCount = new AtomicInteger(0);

    public static void main(String[] args) throws InterruptedException {
        Flux<String> trafico = Flux.interval(Duration.ofMillis(500))
                .map(i -> random.nextInt(101)) // 0 - 100%
                .onBackpressureBuffer() // simula backpressure
                .filter(level -> level > 70)
                .map(level -> "🚗 Alerta: Congestión del " + level + "% en Avenida Solar");

        Flux<String> contaminacion = Flux.interval(Duration.ofMillis(600))
                .map(i -> 30 + random.nextInt(50)) // 30 - 79 ug/m3
                .filter(pm -> pm > 50)
                .map(pm -> "🌫️ Alerta: Contaminación alta (PM2.5: " + pm + " ug/m3)");

        Flux<String> accidentes = Flux.interval(Duration.ofMillis(800))
                .map(i -> {
                    String[] prioridades = {"Baja", "Media", "Alta"};
                    return prioridades[random.nextInt(prioridades.length)];
                })
                .filter(p -> p.equals("Alta"))
                .map(p -> "🚑 Emergencia vial: Accidente con prioridad " + p);

        Flux<String> trenes = Flux.interval(Duration.ofMillis(700))
                .map(i -> random.nextInt(11)) // 0 - 10 min
                .delayElements(Duration.ofMillis(200)) // simula backpressure adicional
                .filter(delay -> delay > 5)
                .map(delay -> "🚝 Tren maglev con retraso crítico: " + delay + " minutos");

        Flux<String> semaforos = Flux.interval(Duration.ofMillis(400))
                .map(i -> {
                    String[] estados = {"Verde", "Amarillo", "Rojo"};
                    return estados[random.nextInt(estados.length)];
                })
                .filter(estado -> {
                    if (estado.equals("Rojo")) {
                        return semaforoRojoCount.incrementAndGet() >= 3;
                    } else {
                        semaforoRojoCount.set(0);
                        return false;
                    }
                })
                .map(e -> "🚦 Semáforo en Rojo detectado 3 veces seguidas en cruce Norte")
                .doFinally(signal -> semaforoRojoCount.set(0));

        // Alerta global: combinamos eventos simultáneos
        Flux.combineLatest(trafico, contaminacion, accidentes, trenes, semaforos,
                (t, c, a, tr, s) -> {
                    int count = 0;
                    if (t != null) count++;
                    if (c != null) count++;
                    if (a != null) count++;
                    if (tr != null) count++;
                    if (s != null) count++;

                    StringBuilder builder = new StringBuilder();
                    if (t != null) builder.append(t).append("\n");
                    if (c != null) builder.append(c).append("\n");
                    if (a != null) builder.append(a).append("\n");
                    if (tr != null) builder.append(tr).append("\n");
                    if (s != null) builder.append(s).append("\n");

                    if (count >= 3) {
                        builder.append("🚨 Alerta global: Múltiples eventos críticos detectados en Meridian Prime\n");
                    }

                    return builder.toString();
                })
                .subscribe(System.out::println);

        Thread.sleep(20000); // Simula ejecución por 20 segundos
    }
}
