import java.util.concurrent.*;
import java.util.concurrent.locks.ReentrantLock;

public class SimulacionHospital {

    public static void main(String[] args) {
        System.out.println("üè• Iniciando acceso a la Sala de cirug√≠a...");

        RecursoMedico salaCirugia = new RecursoMedico("Sala de cirug√≠a");

        // Crear un pool de hilos
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // Crear tareas (profesionales m√©dicos)
        Runnable draSanchez = () -> salaCirugia.usar("üë©‚Äç‚öïÔ∏è Dra. S√°nchez");
        Runnable drGomez = () -> salaCirugia.usar("üë®‚Äç‚öïÔ∏è Dr. G√≥mez");
        Runnable enfermeraLopez = () -> salaCirugia.usar("üë©‚Äç‚öïÔ∏è Enfermera L√≥pez");
        Runnable drRamirez = () -> salaCirugia.usar("üë®‚Äç‚öïÔ∏è Dr. Ram√≠rez");

        // Ejecutar las tareas
        executor.execute(draSanchez);
        executor.execute(drGomez);
        executor.execute(enfermeraLopez);
        executor.execute(drRamirez);

        // Cerrar el executor
        executor.shutdown();
    }
}

// Clase que representa un recurso m√©dico compartido
class RecursoMedico {
    private String nombre;
    private ReentrantLock lock = new ReentrantLock();

    public RecursoMedico(String nombre) {
        this.nombre = nombre;
    }

    public void usar(String profesional) {
        lock.lock();
        try {
            System.out.println(profesional + " ha ingresado a " + nombre);
            Thread.sleep(1500); // Simula tiempo de uso del recurso
            System.out.println("‚úÖ " + profesional + " ha salido de " + nombre);
        } catch (InterruptedException e) {
            System.out.println("‚ö†Ô∏è " + profesional + " fue interrumpido.");
        } finally {
            lock.unlock(); // Muy importante liberar el recurso
        }
    }
}
