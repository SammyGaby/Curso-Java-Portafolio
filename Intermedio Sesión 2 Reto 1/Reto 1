import java.util.concurrent.*;

class SistemaNavegacion implements Callable<String> {
    @Override
    public String call() throws Exception {
        Thread.sleep(1200);
        return "üõ∞Ô∏è Navegaci√≥n: trayectoria corregida con √©xito.";
    }
}

class SistemaSoporteVital implements Callable<String> {
    @Override
    public String call() throws Exception {
        Thread.sleep(900);
        return "üß™ Soporte vital: presi√≥n y ox√≠geno dentro de par√°metros normales.";
    }
}

class SistemaControlTermico implements Callable<String> {
    @Override
    public String call() throws Exception {
        Thread.sleep(1000);
        return "üî• Control t√©rmico: temperatura estable (22¬∞C).";
    }
}

class SistemaComunicaciones implements Callable<String> {
    @Override
    public String call() throws Exception {
        Thread.sleep(700);
        return "üì° Comunicaciones: enlace con estaci√≥n terrestre establecido.";
    }
}

public class SimulacionMisionEspacial {
    public static void main(String[] args) throws Exception {
        System.out.println("üöÄ Simulaci√≥n de misi√≥n espacial iniciada...\n");

        ExecutorService executor = Executors.newFixedThreadPool(4);

        Future<String> futuroNavegacion = executor.submit(new SistemaNavegacion());
        Future<String> futuroSoporteVital = executor.submit(new SistemaSoporteVital());
        Future<String> futuroControlTermico = executor.submit(new SistemaControlTermico());
        Future<String> futuroComunicaciones = executor.submit(new SistemaComunicaciones());

        // Mostrar resultados (el orden puede variar)
        System.out.println(futuroComunicaciones.get());
        System.out.println(futuroSoporteVital.get());
        System.out.println(futuroControlTermico.get());
        System.out.println(futuroNavegacion.get());

        executor.shutdown();

        System.out.println("\n‚úÖ Todos los sistemas reportan estado operativo.");
    }
}
