import reactor.core.publisher.Flux;
import reactor.core.scheduler.Schedulers;

import java.time.Duration;
import java.util.Random;

public class UCIMonitoringSystem {

    private static final Random random = new Random();

    public static void main(String[] args) throws InterruptedException {

        Flux<String> paciente1 = generarFlujoPaciente(1);
        Flux<String> paciente2 = generarFlujoPaciente(2);
        Flux<String> paciente3 = generarFlujoPaciente(3);

        Flux<String> sistemaUCI = Flux.merge(paciente1, paciente2, paciente3)
                .delayElements(Duration.ofSeconds(1)) // Backpressure
                .publishOn(Schedulers.boundedElastic());

        sistemaUCI.subscribe(alerta -> System.out.println(alerta));

        Thread.sleep(20000); // Tiempo de simulación (20s)
    }

    private static Flux<String> generarFlujoPaciente(int id) {
        return Flux.interval(Duration.ofMillis(300))
                .map(i -> generarDatosPaciente(id))
                .filter(alerta -> !alerta.isEmpty());
    }

    private static String generarDatosPaciente(int id) {
        int fc = random.nextInt(161) + 40; // 40–200 bpm
        int paSistolica = random.nextInt(81) + 80; // 80–160 mmHg
        int paDiastolica = random.nextInt(51) + 50; // 50–100 mmHg
        int spo2 = random.nextInt(21) + 80; // 80–100 %

        // Prioridad: FC > SpO2 > PA
        if (fc < 50 || fc > 120) {
            return "⚠️ Paciente " + id + " - FC crítica: " + fc + " bpm";
        }
        if (spo2 < 90) {
            return "⚠️ Paciente " + id + " - SpO2 baja: " + spo2 + "%";
        }
        if (paSistolica < 90 || paDiastolica < 60 || paSistolica > 140 || paDiastolica > 90) {
            return "⚠️ Paciente " + id + " - PA crítica: " + paSistolica + "/" + paDiastolica + " mmHg";
        }

        return ""; // No hay alerta
    }
}
