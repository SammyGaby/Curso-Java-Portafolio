import io.reactivex.rxjava3.core.*;
import io.reactivex.rxjava3.schedulers.Schedulers;

import java.util.Random;
import java.util.concurrent.TimeUnit;

public class UCIReactiveRxJava {

    static Random random = new Random();

    static class SignosVitales {
        int pacienteId;
        int fc;
        int spo2;
        int paSys;
        int paDia;

        SignosVitales(int pacienteId, int fc, int spo2, int paSys, int paDia) {
            this.pacienteId = pacienteId;
            this.fc = fc;
            this.spo2 = spo2;
            this.paSys = paSys;
            this.paDia = paDia;
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Flowable<SignosVitales> paciente1 = generarFlujoPaciente(1);
        Flowable<SignosVitales> paciente2 = generarFlujoPaciente(2);
        Flowable<SignosVitales> paciente3 = generarFlujoPaciente(3);

        Flowable
            .merge(paciente1, paciente2, paciente3)
            .filter(UCIReactiveRxJava::esCritico)
            .observeOn(Schedulers.io())
            .delay(1, TimeUnit.SECONDS)  // Simula procesamiento lento
            .subscribe(UCIReactiveRxJava::procesarEvento);

        Thread.sleep(30000); // Simula ejecución de 30s
    }

    static Flowable<SignosVitales> generarFlujoPaciente(int id) {
        return Flowable.interval(0, 300, TimeUnit.MILLISECONDS)
            .map(tick -> generarDatos(id))
            .subscribeOn(Schedulers.computation());
    }

    static SignosVitales generarDatos(int id) {
        int fc = 40 + random.nextInt(121);       // 40-160 bpm
        int spo2 = 85 + random.nextInt(16);      // 85–100%
        int paSys = 80 + random.nextInt(81);     // 80–160
        int paDia = 50 + random.nextInt(51);     // 50–100
        return new SignosVitales(id, fc, spo2, paSys, paDia);
    }

    static boolean esCritico(SignosVitales sv) {
        return sv.fc < 50 || sv.fc > 120 ||
               sv.spo2 < 90 ||
               sv.paSys < 90 || sv.paDia < 60 || sv.paSys > 140 || sv.paDia > 90;
    }

    static void procesarEvento(SignosVitales sv) {
        if (sv.fc < 50 || sv.fc > 120) {
            System.out.println("⚠️ Paciente " + sv.pacienteId + " - FC crítica: " + sv.fc + " bpm");
        } else if (sv.spo2 < 90) {
            System.out.println("⚠️ Paciente " + sv.pacienteId + " - SpO2 baja: " + sv.spo2 + "%");
        } else {
            System.out.println("⚠️ Paciente " + sv.pacienteId + " - PA crítica: " + sv.paSys + "/" + sv.paDia + " mmHg");
        }
    }
}

