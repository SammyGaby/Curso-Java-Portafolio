import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

class Tema implements Comparable<Tema> {
    private String titulo;
    private int prioridad;

    public Tema(String titulo, int prioridad) {
        this.titulo = titulo;
        this.prioridad = prioridad;
    }

    public String getTitulo() {
        return titulo;
    }

    public int getPrioridad() {
        return prioridad;
    }

    @Override
    public int compareTo(Tema otro) {
        return this.titulo.compareToIgnoreCase(otro.titulo);
    }

    @Override
    public String toString() {
        return "ðŸ“˜ " + titulo + " (Prioridad: " + prioridad + ")";
    }
}

public class TemarioColaborativo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Tema> temasActivos = new ArrayList<Tema>();
        HashMap<String, String> recursos = new HashMap<String, String>();

        System.out.print("Â¿CuÃ¡ntos temas quieres registrar?: ");
        int cantidadTemas = scanner.nextInt();
        scanner.nextLine(); // Limpiar salto de lÃ­nea

        for (int i = 1; i <= cantidadTemas; i++) {
            System.out.println("\nTema #" + i);
            System.out.print("TÃ­tulo del tema: ");
            String titulo = scanner.nextLine();

            System.out.print("Prioridad (1 = urgente, 2 = importante, 3 = opcional): ");
            int prioridad = scanner.nextInt();
            scanner.nextLine(); // Limpiar salto de lÃ­nea

            System.out.print("Enlace o descripciÃ³n del recurso: ");
            String recurso = scanner.nextLine();

            temasActivos.add(new Tema(titulo, prioridad));
            recursos.put(titulo, recurso);
        }

        // Mostrar temas ordenados por tÃ­tulo
        System.out.println("\nðŸ”¤ Temas ordenados por tÃ­tulo:");
        Collections.sort(temasActivos);
        for (Tema t : temasActivos) {
            System.out.println(t);
        }

        // Mostrar temas ordenados por prioridad
        System.out.println("\nðŸ”¢ Temas ordenados por prioridad:");
        Collections.sort(temasActivos, new Comparator<Tema>() {
            @Override
            public int compare(Tema t1, Tema t2) {
                return Integer.valueOf(t1.getPrioridad()).compareTo(t2.getPrioridad());
            }
        });
        for (Tema t : temasActivos) {
            System.out.println(t);
        }

        // Mostrar repositorio
        System.out.println("\nðŸ“š Repositorio de recursos compartidos:");
        for (String clave : recursos.keySet()) {
            System.out.println("â€¢ " + clave + " â†’ " + recursos.get(clave));
        }

        scanner.close();
    }
}
